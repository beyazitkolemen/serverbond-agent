# Modern Laravel Production Dockerfile
# Multi-stage build for optimized image size and security

# Build arguments
ARG PHP_VERSION=8.2
ARG NODE_VERSION=18
ARG COMPOSER_VERSION=2.6

# Stage 1: Composer dependencies
FROM composer:${COMPOSER_VERSION} AS composer

WORKDIR /app

# Copy composer files
COPY composer.json composer.lock ./

# Install dependencies
RUN composer install \
    --no-dev \
    --no-scripts \
    --no-autoloader \
    --prefer-dist \
    --ignore-platform-reqs \
    --optimize-autoloader

# Copy source code
COPY . .

# Generate optimized autoloader
RUN composer dump-autoload --optimize --classmap-authoritative

# Stage 2: Node.js build
FROM node:${NODE_VERSION}-alpine AS node

WORKDIR /app

# Copy package files
COPY package.json package-lock.json ./

# Install dependencies
RUN npm ci --production=false

# Copy source code
COPY . .

# Build assets
RUN npm run build

# Stage 3: Production image
FROM php:${PHP_VERSION}-fpm-alpine

# Labels
LABEL maintainer="ServerBond"
LABEL version="2.0"
LABEL description="Modern Laravel production-ready container"
LABEL org.opencontainers.image.source="https://github.com/serverbond/agent"

# Install system dependencies
RUN apk add --no-cache \
    nginx \
    supervisor \
    bash \
    curl \
    wget \
    libpng-dev \
    libjpeg-turbo-dev \
    libwebp-dev \
    freetype-dev \
    libzip-dev \
    icu-dev \
    postgresql-dev \
    mysql-client \
    git \
    unzip \
    oniguruma-dev \
    libxml2-dev \
    && docker-php-ext-configure gd \
        --with-freetype \
        --with-jpeg \
        --with-webp \
    && docker-php-ext-install -j$(nproc) \
        pdo \
        pdo_mysql \
        pdo_pgsql \
        gd \
        zip \
        opcache \
        intl \
        bcmath \
        exif \
        pcntl \
        mbstring \
        xml \
        soap \
    && pecl install redis \
    && docker-php-ext-enable redis

# Install Composer
COPY --from=composer /usr/bin/composer /usr/bin/composer

# Create application user
RUN addgroup -g 1000 app && \
    adduser -D -s /bin/bash -u 1000 -G app app

# Set working directory
WORKDIR /var/www/html

# Copy application files
COPY --from=composer --chown=app:app /app ./
COPY --from=node --chown=app:app /app/public/build ./public/build

# Copy configuration files
COPY docker/php/php.ini /usr/local/etc/php/php.ini
COPY docker/php/www.conf /usr/local/etc/php-fpm.d/www.conf
COPY docker/nginx/nginx.conf /etc/nginx/nginx.conf
COPY docker/nginx/default.conf /etc/nginx/http.d/default.conf
COPY docker/supervisor/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Create necessary directories
RUN mkdir -p \
    storage/app/public \
    storage/framework/cache \
    storage/framework/sessions \
    storage/framework/views \
    storage/logs \
    bootstrap/cache \
    var/log/nginx \
    var/log/php \
    && chown -R app:app storage bootstrap/cache var \
    && chmod -R 775 storage bootstrap/cache

# Switch to non-root user
USER app

# Optimize Laravel (as app user)
RUN php artisan config:cache \
    && php artisan route:cache \
    && php artisan view:cache

# Switch back to root for supervisor
USER root

# Health check
HEALTHCHECK --interval=30s --timeout=10s --retries=3 --start-period=60s \
    CMD curl -f http://localhost/health || exit 1

# Expose ports
EXPOSE 80 9000

# Start supervisor
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
